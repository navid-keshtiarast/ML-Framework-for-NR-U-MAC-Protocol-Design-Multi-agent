function [ueLayoutMatrix] = setUeLayout3 (factorySizeVector,ueNums,seedNum)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here
    rng(seedNum);
    
    ueLayoutMatrix = zeros(ueNums,3);
    ueLayoutMatrix(:,3) = 1.5;
    allowableDistance = 1;
    
    %ueLayoutMatrix(1,1) = randi([1 factorySizeVector(1)],1,1); 
    ueLayoutMatrix(1,1) = factorySizeVector(1).*rand(1,1);
    %ueLayoutMatrix(1,2) = randi([1 factorySizeVector(2)],1,1);
    ueLayoutMatrix(1,2) = factorySizeVector(2).*rand(1,1);
    
    counter = 2;
    saturationCounter = 1;
    
    while counter < ueNums+1
        %randomX = randi([ueLayoutMatrix(counter-1,1)-1 ueLayoutMatrix(counter-1,1)]+1,1,1);
        bitGen = (rand>=0.5);
        if bitGen == 1
            signum = 1;
        else 
            signum = -1;
        end
        
            randomX = (ueLayoutMatrix(counter-1,1)-1) + 2*randi([0 50],1,1);
            randomY = signum*(ueLayoutMatrix(counter-1,2)-1) + 2*randi([0 50],1,1);

            if randomX < 0 || randomX > factorySizeVector(1)
                if randomX < 0
                    indReset = find(ueLayoutMatrix(:,1) == max(ueLayoutMatrix(1:counter-1,1)));
                    randomX = (ueLayoutMatrix(indReset,1)-1) + 2*randi([0 25],1,1);
                    randomY = (ueLayoutMatrix(indReset,2)-1) + signum*2*randi([0 25],1,1);
                else
                    indReset = find(ueLayoutMatrix(:,1) == min(ueLayoutMatrix(1:counter-1,1)));
                    randomX = (ueLayoutMatrix(indReset,1)-1) + 2*randi([0 25],1,1);
                    randomY = (ueLayoutMatrix(indReset,2)-1) + signum*2*randi([0 25],1,1);
                end
            elseif randomY < 0 || randomY > factorySizeVector(2)
                if randomY < 0
                    indReset = find(ueLayoutMatrix(:,2) == max(ueLayoutMatrix(1:counter-1,2)));
                    randomY = (ueLayoutMatrix(indReset,2)-1) + 2*randi([0 25],1,1);
                    randomX = (ueLayoutMatrix(indReset,1)-1) + signum*2*randi([0 25],1,1);
                else
                    indReset = find(ueLayoutMatrix(:,2) == min(ueLayoutMatrix(1:counter-1,2)));
                    randomY = (ueLayoutMatrix(indReset,2)-1) + 2*randi([0 25],1,1);
                    randomX = (ueLayoutMatrix(indReset,1)-1) + signum*2*randi([0 25],1,1);
                end
            end

            if saturationCounter > 5
                averageVec = mean(ueLayoutMatrix);
                medianVec = median(ueLayoutMatrix,1);
                if bitGen == 1
                    if averageVec(1,1) < medianVec(1,1)
                        indReset = find(ueLayoutMatrix(:,1) == max(ueLayoutMatrix(1:counter-1,1)));
                        randomX = (ueLayoutMatrix(indReset,1)-1) + 2*randi([0 25],1,1);
                        randomY = (ueLayoutMatrix(indReset,2)-1) + signum*2*randi([0 25],1,1);
                        saturationCounter = 1;
                    else
                        indReset = find(ueLayoutMatrix(:,1) == min(ueLayoutMatrix(1:counter-1,1)));
                        randomX = (ueLayoutMatrix(indReset,1)-1) + 2*randi([0 25],1,1);
                        randomY = (ueLayoutMatrix(indReset,2)-1) + signum*2*randi([0 25],1,1);
                        saturationCounter = 1;
                    end
                else
                    if averageVec(1,2) < medianVec(1,2)
                        indReset = find(ueLayoutMatrix(:,2) == max(ueLayoutMatrix(1:counter-1,2)));
                        randomY = (ueLayoutMatrix(indReset,2)-1) + 2*randi([0 25],1,1);
                        randomX = (ueLayoutMatrix(indReset,1)-1) + signum*2*randi([0 25],1,1);
                        saturationCounter = 1;
                    else
                        indReset = find(ueLayoutMatrix(:,2) == min(ueLayoutMatrix(1:counter-1,2)));
                        ind
                        randomY = (ueLayoutMatrix(indReset,2)-1) + 2*randi([0 25],1,1);
                        randomX = (ueLayoutMatrix(indReset,1)-1) + signum*2*randi([0 25],1,1);
                        saturationCounter = 1;
                    end
                end
            end

        distance = sqrt((randomX-ueLayoutMatrix(:,1)).^2 + (randomY-ueLayoutMatrix(:,2)).^2);
    
        minDistance = min(distance);
        if minDistance >= allowableDistance && randomX > 0 && randomX < factorySizeVector(1) && randomY > 0 && randomY < factorySizeVector(2)
            ueLayoutMatrix(counter,1) = randomX;
            ueLayoutMatrix(counter,2) = randomY;
            counter = counter+1;  
        else
            saturationCounter = saturationCounter+1;
        end
    end
    
    ueLayoutMatrix = sortrows(ueLayoutMatrix,[1 2]);
end